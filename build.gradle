buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        // https://github.com/melix/japicmp-gradle-plugin/issues/36
        classpath 'com.google.guava:guava:31.1-jre'
    }
}

plugins {
    id 'java'
    id 'java-library'
    id 'jacoco'
    id 'me.champeau.gradle.japicmp' version '0.4.1'
}

repositories {
    mavenCentral()
}

apply from: rootProject.file('gradle/versioning.gradle')

version = getVersionFromFile()
group = GROUP
logger.lifecycle("Using version ${version} for ${name} group $group")

import me.champeau.gradle.japicmp.JapicmpTask

project.afterEvaluate {
    def versions = project.ext.testInJavaVersions
    for (pluginJavaTestVersion in versions) {
        def taskName = "testInJava-${pluginJavaTestVersion}"
        tasks.register(taskName, Test) {
            def versionToUse = taskName.split("-").getAt(1) as Integer
            description = "Runs unit tests on Java version ${versionToUse}."
            project.logger.quiet("Test will be running in ${versionToUse}")
            group = 'verification'
            javaLauncher.set(javaToolchains.launcherFor {
                languageVersion = JavaLanguageVersion.of(versionToUse)
            })
            shouldRunAfter(tasks.named('test'))
        }
        tasks.named('check') {
            dependsOn(taskName)
        }
    }

    project.configure(project) {
        def baselineVersion = project.ext.baselineCompareVersion
        task('apiDiff', type: JapicmpTask, dependsOn: 'jar') {
            oldClasspath.from(files(getBaselineJar(project, baselineVersion)))
            newClasspath.from(files(jar.archiveFile))
            onlyModified = true
            failOnModification = true
            ignoreMissingClasses = true
            htmlOutputFile = file("$buildDir/reports/apiDiff/apiDiff.html")
            txtOutputFile = file("$buildDir/reports/apiDiff/apiDiff.txt")
            doLast {
                project.logger.quiet("Comparing against baseline version ${baselineVersion}")
            }
        }
    }
}

private static File getBaselineJar(Project project, String baselineVersion) {
    // Use detached configuration: https://github.com/square/okhttp/blob/master/build.gradle#L270
    def group = project.group
    try {
        def baseline = "${project.group}:${project.name}:$baselineVersion"
        project.group = 'virtual_group_for_japicmp'
        def dependency = project.dependencies.create(baseline + "@jar")
        return project.configurations.detachedConfiguration(dependency).files.find {
            it.name == "${project.name}-${baselineVersion}.jar"
        }
    } finally {
        project.group = group
    }
}

ext {
    baselineCompareVersion = '1.5.0'
    testInJavaVersions = [8, 11, 17, 21]
}

jacoco {
    toolVersion = "0.8.13"
}


jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
    }
}


java {
    sourceCompatibility '21'
    targetCompatibility '21'
}

test {
    useJUnitPlatform()
    testLogging {
        events "skipped", "failed"
        exceptionFormat "short"
    }
}

dependencies {
    implementation 'jakarta.servlet:jakarta.servlet-api:6.0.0'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'com.google.guava:guava-annotations:r03'
    implementation 'commons-codec:commons-codec:1.15'

    api 'com.auth0:auth0:1.45.1'
    api 'com.auth0:java-jwt:3.19.4'
    api 'com.auth0:jwks-rsa:0.22.1'

    testImplementation 'org.bouncycastle:bcprov-jdk15on:1.64'
    testImplementation 'org.hamcrest:java-hamcrest:2.0.0.0'
    testImplementation 'org.hamcrest:hamcrest-core:1.3'
    testImplementation 'org.mockito:mockito-core:4.11.0'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'
    testImplementation 'org.springframework:spring-test:6.0.14'
    testImplementation 'org.springframework:spring-web:6.0.14'
    testImplementation 'com.squareup.okhttp3:okhttp:4.11.0'
}

apply from: rootProject.file('gradle/maven-publish.gradle')
